###########################
# GENERAL
###########################

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nvim'
else
  export EDITOR='vim'
fi

# Use vim as $MANPAGER
# https://stackoverflow.com/a/16741577
# https://muru.dev/2015/08/28/vim-for-man.html
export MANPAGER='nvim -c "%! col -b" -c "set ft=man nomod | let &titlestring=$MAN_PN"'

# Increase soft per-process file descriptor limit to 1024
ulimit -Sn 1024

###########################
# ENVIRONMENT VARIABLES
###########################

# Set up and source the device-specific env var files
mkdir -p ~/env
touch ~/env/local.sh ~/env/sensitive.sh
chmod u+x ~/env/local.sh ~/env/sensitive.sh
source ~/env/local.sh
source ~/env/sensitive.sh

# Add more paths to $MANPATH; confirm with man --path
SYSTEM_MANPATH="/usr/share/man"
if [[ ! "$MANPATH" == *$SYSTEM_MANPATH* ]]; then
    export MANPATH="$SYSTEM_MANPATH:$MANPATH"
fi
USER_MANPATH="$HOME/.local/share/man"
mkdir -p $USER_MANPATH
if [[ ! "$MANPATH" == *$USER_MANPATH* ]]; then
    export MANPATH="$USER_MANPATH:$MANPATH"
fi

# User binaries requiring root access
ROOT_BIN_PATH="$(brew --prefix)/sbin"
if [[ ! "$PATH" == *$ROOT_BIN_PATH* ]]; then
  export PATH="$PATH:$ROOT_BIN_PATH"
fi

# Rust (cargo) binaries
CARGO_BIN_PATH="$HOME/.cargo/bin"
if [[ ! "$PATH" == *$CARGO_BIN_PATH* ]]; then
  export PATH="$CARGO_BIN_PATH:$PATH"
fi

# Go
export GOPATH=~/gocode
GO_BIN_PATH="$GOPATH/bin"
if [[ ! "$PATH" == *$GOPATH* ]]; then
  export PATH="$PATH:$GOPATH"
fi

# Ruby - chruby
if [ -f $(brew --prefix)/opt/chruby/share/chruby/chruby.sh ]; then
    source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh
fi
# Enable auto-switching of Rubies specified by .ruby-version files
if [ -f $(brew --prefix)/opt/chruby/share/chruby/auto.sh ]; then
    source $(brew --prefix)/opt/chruby/share/chruby/auto.sh
fi
# Use 2.7.2 by default
if [ -x "$(command -v chruby)" ]; then
    chruby ruby-2.7.2
fi

# Ruby - Gem
export GEM_HOME=$HOME/.local/gem
GEM_BIN=$GEM_HOME/bin
if [[ ! "$PATH" == *$GEM_BIN* ]]; then
    export PATH="$PATH:$GEM_BIN"
fi

# Java - SDKMAN
export SDKMAN_DIR="$HOME/.local/sdkman" # Default is ~/.local
if [[ -s "$SDKMAN_DIR/bin/sdkman-init.sh" ]]; then
    source "$SDKMAN_DIR/bin/sdkman-init.sh"
fi

# Android `cmdline-tools
export ANDROID_HOME=$HOME/.local/android
ANDROID_SDK_VERSION=33.0.1
ANDROID_PATH=$ANDROID_HOME/cmdline-tools/latest/bin
ANDROID_PATH=$ANDROID_PATH:$ANDROID_HOME/build-tools/$ANDROID_SDK_VERSION
ANDROID_PATH=$ANDROID_PATH:$ANDROID_HOME/platform-tools
if [[ ! "$PATH" == *$ANDROID_PATH* ]]; then
    export PATH="$PATH:$ANDROID_PATH"
fi

# Flutter
export FLUTTER_HOME=$HOME/.local/flutter/bin
if [[ ! "$PATH" == *$FLUTTER_HOME* ]]; then
    export PATH="$PATH:$FLUTTER_HOME"
fi

# --- fzf --- #

# Setup
FZF_BIN_PATH="$(brew --prefix)/opt/fzf/bin"
if [[ ! "$PATH" == *$FZF_BIN_PATH* ]]; then
  export PATH="$PATH:$FZF_BIN_PATH"
fi

# Auto-completion
if [[ "bash" == $0 ]]; then
    [[ $- == *i* ]] && source "$(brew --prefix)/opt/fzf/shell/completion.bash" 2> /dev/null
elif [[ "zsh" == $0 ]]; then
    [[ $- == *i* ]] && source "$(brew --prefix)/opt/fzf/shell/completion.zsh" 2> /dev/null
fi

# Key bindings
if [[ "bash" == $0 ]]; then
    source "$(brew --prefix)/opt/fzf/shell/key-bindings.bash"
elif [[ "zsh" == $0 ]]; then
    source "$(brew --prefix)/opt/fzf/shell/key-bindings.zsh"
fi

# --bind in :Man fzf (in vim) for details
# FIXME: Doesn't work
export FZF_DEFAULT_OPTS='--bind alt-a:select-all'

# Use ripgrep for fzf filename searching
if [ -x "$(command -v rg)" ]; then
    export FZF_DEFAULT_COMMAND='rg --files --fixed-strings --ignore-case '\
'--no-ignore --hidden --follow '\
'--glob "!*.git/*" --glob "!*target/*" '
fi

# Use gruvbox-dark theme for bat which is used by fzf in vim
# See https://github.com/sharkdp/bat#highlighting-theme for more info
export BAT_THEME="gruvbox-dark"

###########################
# ALIASES
###########################

# Alias definitions. Currently not used
# if [ -f ~/.bash_aliases ]; then
#     . ~/.bash_aliases
# fi

# Some ls aliases
alias ll='ls -alF'
alias la='ls -a'
alias l='ls -CF'
alias ls='ls -GFh'

# Settings and misc aliases
alias py=python3
alias rmpyc="find ./ -name '*pyc' | xargs rm -f"
alias rmswp="find ./ -name '*swp' | xargs rm -f"

# thefuck alias
if [ -x "$(command -v thefuck)" ]; then
    eval "$(thefuck --alias)"
fi
# Fix for git push --no-verify over --set-upstream until packages are updated
# https://github.com/nvbn/thefuck/issues/1207#issuecomment-864671223
export THEFUCK_PRIORITY="git_hook_bypass=1100"

# cdls and cdl as commands to change directory and list
cdls() { cd "$@" && ls; }
cdl() { cd "$@" && l; }

# commands to update configs
alias resource="source ~/.dotfiles/scripts/resource.sh"
alias to-dotfiles="source ~/.dotfiles/scripts/to-dotfiles.sh"
alias from-dotfiles="source ~/.dotfiles/scripts/from-dotfiles.sh"

# Quickly switch between different environments with $ work <project>
work() { resource && . ~/.dotfiles/scripts/"$@".sh; }

wordcount() { find ~/Obsidian/ -type f -name "*.md" -exec cat '{}' \+ | wc -w; }

# Easy extract
extract () {
  if [ -f $1 ] ; then
      case $1 in
          *.tar.bz2)   tar xvjf $1    ;;
          *.tar.gz)    tar xvzf $1    ;;
          *.bz2)       bunzip2 $1     ;;
          *.rar)       rar x $1       ;;
          *.gz)        gunzip $1      ;;
          *.tar)       tar xvf $1     ;;
          *.tbz2)      tar xvjf $1    ;;
          *.tgz)       tar xvzf $1    ;;
          *.zip)       unzip $1       ;;
          *.Z)         uncompress $1  ;;
          *.7z)        7z x $1        ;;
          *)           echo "don't know how to extract '$1'..." ;;
      esac
  else
      echo "'$1' is not a valid file!"
  fi
}

# Strip out ansi characters from a log file: `strip-ansi example.log`
strip-ansi() {
  if [ -f "$1" ]; then
    perl -i -pe 's/\x1B\[(([0-9]{1,2})?(;)?([0-9]{1,2})?)?[m,K,H,f,J]//g' "$1"
    echo "ANSI escape codes have been removed from $1"
  else
    echo "File $1 does not exist."
  fi
}

# Hack for YCM to work
# Removed because it causes LibreSSL to not work when downloading
# packages from crates.io
# export DYLD_FORCE_FLAT_NAMESPACE=1

# Vim
alias vim=nvim
alias vi=nvim

# Ripgrep
alias rgf="rg --files"
alias rgn="rg --no-ignore"
alias rgfn="rg --files --no-ignore"
alias rgnf="rg --files --no-ignore"
# Emulate Silver Searcher's -g filename search somewhat
function rgg { rg --files | rg "$@" }
function rggn { rg --files --no-ignore | rg "$@" }
# To get log/tyche_rCURRENT.log (where log/* is in .gitignore);
# - rggn CURR
# - rgfn | rg CURR
# or just use silver searcher:
# - ag -U -g CURR
# - ag -Ug CURR

# Justfile
alias j="just"

# Java
alias javat="java org.junit.runner.JUnitCore"
alias javatest="java org.junit.runner.JUnitCore"

# Git
# Outputs `main` or `master` to stdout
function main_branch() {
    git branch | grep -o -m1 '\b\(master\|main\)\b'
}

# Prints the message of the most recent commit attempt, useful for retrying a
# commit if the commit failed due to e.g. GPG sign.
function failed-commit-msg() {
    # (1) Take the failed commit msg, (2) find the start of the useless part,
    # (3) extract the line number only, then (4) assign the result to INDEX.
    INDEX=$( \
        cat $(git rev-parse --git-dir)/COMMIT_EDITMSG \
        | rg "Please enter the commit message for your changes" -n -m 1 \
        | sed -n 's/^\([0-9]*\)[:].*/\1/p' \
    )
    # Subtract 1 and assign to HEAD_N, which we'll pass to `head -n`
    # TODO(max): Fix this in the case that git commit does NOT have -v passed in
    HEAD_N=$((INDEX - 1))
    # Echo the result
    echo "$(cat $(git rev-parse --git-dir)/COMMIT_EDITMSG | head -n ${HEAD_N})"
}
# Retry the most recent failed commit using the same commit message as before
alias recommit='git commit -m "$(failed-commit-msg)"'

# Force push the current branch to `origin` up to the given commit
function gpfc() {
  local commit=$1
  local branch=$(git symbolic-ref --short HEAD)
  git push --force-with-lease --force-if-includes origin +$commit:$branch
}

# Run any git command with a split diff, e.g. `DD gshs`. Think 'delta-double'
alias DD="DELTA_FEATURES=+side-by-side"

alias g="git status"
unalias gss # OMZ git status -s

# gsh is already set to "git show" by zsh
alias gshs="git show --show-signature"
alias ddgsh="DELTA_FEATURES=+side-by-side git show"
alias ddgshs="DELTA_FEATURES=+side-by-side git show --show-signature"

alias ga="git add"
alias ga.="git add ."
alias gap="git add --patch"

alias gd="git diff"
alias gds="git diff --staged"
alias gdd="DELTA_FEATURES=+side-by-side git diff" # Think 'double-diff'
alias gdds="DELTA_FEATURES=+side-by-side git diff --staged" # 'double-diff'

# Syntax-highlighted diff with bat
bd() { git diff --name-only --diff-filter=d | xargs bat --paging=always --diff }
bds() { git diff --staged | bat --paging=always --style=changes,header,grid,snip }

function gas { git add "$@"; git diff --staged "$@"; }

alias gch="git checkout"
function gchm() { git checkout `main_branch` }

alias grhsh='git reset --soft HEAD~1'
alias grsm='git reset . && gchm'

alias gcm="git commit -m"
alias gca="git commit -v --amend"
alias gcf="git commit -v --fixup"
alias gcfh="git commit -v --fixup HEAD"

alias gp="git push"
alias gpo="git push origin"
alias gpom="git push origin master"
# Push one commit to origin/<current-branch>
function gpone { git push origin "$@":"$(git symbolic-ref --short HEAD)" }
function gpfone { git push --force-with-lease --force-if-includes origin "$@":"$(git symbolic-ref --short HEAD)" }

alias gl="git pull"
alias glor="git pull origin"
function glorm() { git pull origin `main_branch` }

alias glu="git pull upstream"
unalias glum # For some reason set to 'git pull upstream master'
function glum() { git pull upstream `main_branch` }

alias glr="git pull --rebase"
alias glror="git pull --rebase origin"
function glrorm() { git pull --rebase origin `main_branch` }
unalias gup # OMZ git pull --rebase
unalias gupa # OMZ git pull --rebase --autostash
unalias gupav # OMZ git pull --rebase --autostash -v
unalias gupv # OMZ git pull --rebase -v
unalias ggpull # OMZ git pull origin "$(git_current_branch)"

# gm is 'git merge'
alias gmf="git merge --ff-only"
alias gmm="git merge $(git_main_branch)"

alias gs="git stash --include-untracked"
alias gsa="git stash apply"
alias gsd="git stash drop"
alias gsl="git stash list"
alias gsp="git stash pop"
alias gss="git stash show --text"
unalias gstaa # OMZ git stash apply
unalias gstc # OMZ git stash clear
unalias gstd # OMZ git stash drop
unalias gstl # OMZ git stash list
unalias gstp # OMZ git stash pop
unalias gsts # OMZ git stash show --text
unalias gsta # OMZ git stash push
unalias gstall # OMZ git stash --all

alias grm="git rm"

alias gb="git branch"
alias gbr="git branch -r"

alias grb="git rebase"
alias grbi="git rebase -i"
alias grbia="git rebase -i --autosquash"
alias grbc="git rebase --continue"
alias grbs="git rebase --skip"
function grbm() { git rebase `main_branch` }
function grbim() { git rebase -i `main_branch` }
function grbiam() { git rebase -i --autosquash `main_branch` }
function glrbm() {
    git fetch origin `main_branch`:`main_branch` && git rebase `main_branch`
}

alias gbl="git blame"

alias grs="git restore"
alias grss="git restore --staged"

alias gsur="git submodule update --recursive"
alias gsuri="git submodule update --recursive --init"

# Python
# alias py="python3"
# alias py3="python3"
# alias python="python3"

# Django
alias pm="python manage.py"

alias pmr="python manage.py runserver -v 2"

alias pms="python manage.py shell -v 2"

alias pmt="python manage.py test -v 2"
alias pmtk="python manage.py test -k -v 2"

alias pmmkm="python manage.py makemigrations -v 2"

alias pmm="python manage.py migrate"
alias pmml="python manage.py migrate --list"
alias pmmfi="python manage.py migrate --fake-initial"

alias pmc="python manage.py check -v 2"

# Pip
# alias pip="pip3"
alias pirr="pip3 install -r requirements.txt"
alias pfr="pip3 freeze > requirements.txt"

# Ctags
alias ctagshide="ctags -R -f ./.git/tags"
alias ctagsfull="ctags --links=no --exclude='@.gitignore' -R ."

# Lightning Network
alias lncli-alice="lncli --macaroonpath=data/admin.macaroon --rpcserver=localhost:10001"
alias lncli-bob="lncli --macaroonpath=data/admin.macaroon --rpcserver=localhost:10002"
alias lncli-charlie="lncli --macaroonpath=data/admin.macaroon --rpcserver=localhost:10003"

# Cargo / Rust
alias c="cargo"
alias cc="cargo clippy"
alias cr="cargo run"
alias crr="cargo run --release"
alias cb="cargo build"
alias cbr="cargo build --release"
alias cf="cargo fmt -- -l"
alias cx="cargo fix --allow-staged --allow-dirty --all-targets"
alias ct="cargo test"
alias cw="cargo watch"

# Misc
alias sw="sass --watch"
alias ngrok="~/ngrok http 8000 -subdomain=maxfangx"
alias sv="grunt server"
svp() { grunt server --partner=$1; }
alias latexmk='latexmk -pdf -pvc'
alias fucking='sudo'
alias damnshortcuts="rm ~/Library/Preferences/com.apple.symbolichotkeys.plist"
alias cputemp="~/github/osx-cpu-temp/osx-cpu-temp"
alias eutykhia="cargo run" # just for fun
alias tyche="cargo run --release" # just for fun
alias lc="lncli" # lncli is awkward to type in DVORAK
